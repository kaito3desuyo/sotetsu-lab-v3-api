name: Deploy on push version tags
on: push

jobs:
    deploy:
        runs-on: ubuntu-latest
        permissions:
            id-token: write
            contents: read

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
                  aws-region: ap-northeast-1

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build, tag, and push docker image to Amazon ECR
              id: build-image
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY_NAME }}
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
                  docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
                  echo "image=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}" >> ${GITHUB_OUTPUT}

            - name: Fill in the new image ID in the Amazon ECS task definition
              id: task-def
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                  task-definition: taskdef.json
                  container-name: api
                  image: ${{ steps.build-image.outputs.image }}

            - name: Deploy Amazon ECS task definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                  task-definition: ${{ steps.task-def.outputs.task-definition }}
                  cluster: ${{ secrets.AWS_ECS_CLUSTER_NAME }}
                  service: ${{ secrets.AWS_ECS_SERVICE_NAME }}
                  wait-for-service-stability: true
                  codedeploy-appspec: appspec.yaml
                  codedeploy-application: ${{ secrets.AWS_CODEDEPLOY_APPLICATION_NAME }}
                  codedeploy-deployment-group: ${{ secrets.AWS_CODEDEPLOY_DEPLOYMENT_GROUP_NAME }}
